# Compatible with Docassemble version 0.5.4
---
modules:
  - docassemble.base.util
  - .debug
---
mandatory: True
code: |
  from docassemble.base.functions import get_uid
  if not defined("___answers_session_id"):
    define("___answers_session_id", get_uid())
---
mandatory: True
code: |
  define("Today", today())
---
mandatory: True
code: |
  define("___memoized_values", {})
---
initial: True
code: |
  def ___compiled_metapython_block():
    return True

  import datetime
  import types

  def empty_string():
    return ""

  def ternary(condition, true_value, false_value):
    if is_undefined(condition):
      return Undefined()
    elif is_true(augment(condition)):
      return primitive_value(true_value)
    else:
      return primitive_value(false_value)

  def cl_array_access(array, _index):
    index = _index - 1
    return (array[index] if index < len(array) else None)

  def primitive_value(something):
    return augment(something).wrapped

  def Undefined():
    return augment(None)

  def erase(variable_name):
    undefine(variable_name)
    ___memoized_values.pop(variable_name, None)

  def is_true(arg):
    return primitive_value(arg) == True

  def is_false(arg):
    return primitive_value(arg) == False

  def is_falsy(arg):
    wrapped = primitive_value(arg)
    return wrapped == False or wrapped == None

  def is_truthy(arg):
    wrapped = primitive_value(arg)
    return not is_falsy(wrapped)

  def is_augmented(something):
    return something.__class__.__name__ == 'Augmented'

  def augment(something=None):
    if is_augmented(something):
      return something
    return Augmented(something)

  def is_undefined(something):
    return augment(something).wrapped == None

  def is_not_undefined(something):
    return not is_undefined(something)

  class Augmented(object):
    def __init__(self, something):
      self.wrapped = something
    def __str__(self):
      return str(self.wrapped)
    # array
    def array_index(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(cl_array_access(self.wrapped, int(arg.wrapped)))
    def array_size(self):
      if is_undefined(self):
        return self
      return augment(len(self.wrapped))
    def array_leading(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[:int(arg.wrapped)])
    def array_trailing(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[int(-(arg.wrapped)):])
    def array_excluding_leading(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[int(arg.wrapped):])
    def array_excluding_trailing(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[:int(-(arg.wrapped))])
    # boolean
    def boolean_and(self, _arg):
      arg = augment(_arg)
      if is_false(self.wrapped) or is_false(arg.wrapped):
        return augment(False)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped and arg.wrapped)
    def boolean_or(self, _arg):
      arg = augment(_arg)
      if is_true(self.wrapped) or is_true(arg.wrapped):
        return augment(True)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped or arg.wrapped)
    def boolean_not(self):
      if is_undefined(self):
        return self
      return augment(not self.wrapped)
    def boolean_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def boolean_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    # number
    def number_add(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + arg.wrapped)
    def number_subtract(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped - arg.wrapped)
    def number_multiply(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped * arg.wrapped)
    def number_divide(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      if arg.wrapped == 0:
        return Undefined()
      return augment(self.wrapped / arg.wrapped)
    def number_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def number_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def number_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped > arg.wrapped)
    def number_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped >= arg.wrapped)
    def number_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped < arg.wrapped)
    def number_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped <= arg.wrapped)
    # string
    def string_join_with_space(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + ' ' + arg.wrapped)
    def string_join_without_space(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + arg.wrapped)
    def string_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def string_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def string_length(self):
      if is_undefined(self):
        return Undefined()
      return augment(len(self.wrapped))
    # time
    def time_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def time_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def time_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped > arg.wrapped)
    def time_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped >= arg.wrapped)
    def time_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped < arg.wrapped)
    def time_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped <= arg.wrapped)
    # date
    def date_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped.replace(tzinfo=None) == arg.wrapped.replace(tzinfo=None))
    def date_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped.replace(tzinfo=None) != arg.wrapped.replace(tzinfo=None))
    def date_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped.replace(tzinfo=None) > arg.wrapped.replace(tzinfo=None))
    def date_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped.replace(tzinfo=None) >= arg.wrapped.replace(tzinfo=None))
    def date_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped.replace(tzinfo=None) < arg.wrapped.replace(tzinfo=None))
    def date_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped.replace(tzinfo=None) <= arg.wrapped.replace(tzinfo=None))
    # dictionary
    def dictionary_all_false(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.all_false())
    def dictionary_all_true(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.all_true())
    def dictionary_any_false(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.any_false())
    def dictionary_any_true(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.any_true())
    def dictionary_access(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return self
      return augment(self.wrapped.get(arg.wrapped))

      if len(___selected_row_unflattened) == 0:
        raise(Exception("The index you chose (" + str(primitive_value(key_column_value)) + ") for Google table '" + primitive_value(self).get('variable_name') + "' didn't match any values found in the table."))

      ___selected_row = ___selected_row_unflattened[0]
      ___all_column_values = {}
      ___columns = primitive_value(self).get('columns')

      for column in ___columns:
        ___all_column_values.update({ column.get('name'): list_access_with_default(___selected_row, column.get('column_index')) })

      return augment(___all_column_values)

    def google_table_includes_row_with_key(self, key_column_value):
      import requests, json
      if is_undefined(self) or is_undefined(key_column_value):
        return Undefined()

          # date math
    def days_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(days=self.wrapped))
    def months_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(months=self.wrapped))
    def years_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(years=self.wrapped))
    def days_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(days=self.wrapped))
    def months_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(months=self.wrapped))
    def years_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(years=self.wrapped))
    # date formatting
    def date_format_ddmmyyyy(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='d/M/yyyy'))
    def date_format_mmddyyyy(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='M/d/yyyy'))
    def date_format_yyyymmdd(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='yyyy/M/d'))
    def date_format_mdy_month_name(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='long'))
    def date_format_mdy_month_name_day_name(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='full'))
    def days_since(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment((self.wrapped - arg.wrapped).days)
    def months_since(self, _arg):
      from dateutil import relativedelta
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      diff = relativedelta.relativedelta(self.wrapped, arg.wrapped)
      months_diff = diff.months
      years_diff = diff.years
      return augment(months_diff + (years_diff * 12))
    def years_since(self, _arg):
      from dateutil import relativedelta
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      diff = relativedelta.relativedelta(self.wrapped, arg.wrapped)
      return augment(diff.years)
    # checkbox formatting
    def boolean_valued_dictionary_as_comma_delimited_list_of_true_values(self):
      if is_undefined(self):
        return Undefined()
      inner_dict = self.wrapped
      keys_for_true_values = [k for k, v in inner_dict.items() if v]
      return augment(", ".join(keys_for_true_values))
    # string typecasting
    def string_as_number(self):
      if is_undefined(self) or (not floatable(self.wrapped)):
        return Undefined()
      return augment(float(self.wrapped))
    def string_as_date_mm_dd_yyyy(self):
      if is_undefined(self) or (not mm_dd_yyyy_dateable(self.wrapped)):
        return Undefined()
      import datetime
      return augment(datetime.datetime.strptime(primitive_value(self.wrapped), '%m/%d/%Y'))
    def number_format_decimal_precision(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment('{:.{prec}f}'.format(self.wrapped, prec=int(arg.wrapped)))
  # typecasting
  def floatable(arg):
    try:
      float(primitive_value(arg))
      return True
    except:
      return False
  def mm_dd_yyyy_dateable(arg):
    import datetime
    try:
      datetime.datetime.strptime(primitive_value(arg), '%m/%d/%Y')
      return True
    except:
      return False
  def typecast_as_date(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(as_datetime(arg.wrapped))
  def typecast_as_number(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(float(arg.wrapped))
  def typecast_as_boolean(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    wrapped = arg.wrapped
    if wrapped == 'True':
      return augment(True)
    if wrapped == 'False':
      return augment(False)
    return Undefined()
  def typecast_as_string(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(str(arg.wrapped))
  def as_url_param_value(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return ''
    return augment(typecast_as_string(arg.wrapped))

  # array reducers

  def number_add_array_reducer(_arg):
    from functools import reduce
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).number_add(augment(y)), arg.wrapped)

  def number_multiply_array_reducer(_arg):
    from functools import reduce
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).number_multiply(augment(y)), arg.wrapped)

  def number_mean_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    size = arg.array_size()
    total = number_add_array_reducer(arg)
    return total.number_divide(size)

  def number_maximum_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return max(map(primitive_value, arg.wrapped))

  def number_minimum_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return min(map(primitive_value, arg.wrapped))

  def boolean_all_true_array_reducer(_arg):
    from functools import reduce
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).boolean_and(augment(y)), arg.wrapped)

  def boolean_any_true_array_reducer(_arg):
    from functools import reduce
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).boolean_or(augment(y)), arg.wrapped)

  def boolean_all_false_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(boolean_any_true_array_reducer(arg)).boolean_not()

  def boolean_any_false_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(boolean_all_true_array_reducer(arg)).boolean_not()

  def cl_array_map(myfunc, _myiterable):
    myiterable = augment(_myiterable)
    if is_undefined(myiterable):
      return myiterable
    return map(myfunc, myiterable.wrapped)

  def is_list(arg):
    return type(augment(arg).wrapped) == type([])

  def is_dict(arg):
    return type(augment(arg).wrapped) == type({})

  def as_url_param_kv_pair(key, _value):
    value = augment(_value)
    if is_list(value):
      if is_dict(cl_array_access(value.wrapped, 1)):
        return list_of_dicts_as_url_param_kv_pairs(key, value)
      else:
        pass
        # no primitive arrays yet
    elif len(str(primitive_value(value))) == 0:
      return ''
    else:
      return '&' + primitive_value(key) + "=" + primitive_value(as_url_param_value(value))

  def list_of_dicts_as_url_param_kv_pairs(key, value):
    pairs = []
    for i, mydict in enumerate(primitive_value(value)):
      for k in primitive_value(mydict).keys():
        key_for_pair = key + '[' + str(i) + ']' + '[' + str(k) + ']'
        value_for_pair = mydict[k]
        pair = '&' + str(key_for_pair) + '=' + str(value_for_pair)
        pairs.append(pair)
    return ''.join(pairs)

  def list_access_with_default(list, index):
    return list[index] if index < len(list) else ''

  def should_show_markdown_variable(var_name):
    return (defined(var_name) and value(var_name) != "")

  def string_as_bool(something):
    return str(primitive_value(something)) == 'True'

  def merge_two_dicts(x, y):
    z = x.copy()
    z.update(y)
    return z

  import re
  from bs4 import BeautifulSoup
  from markdown import markdown

  def markdown_to_plaintext(markdown_string):
    try:
      html_list = list(map(lambda str: markdown(str), markdown_string.split("\n")))
      html_list = list(map(lambda html: re.sub(r'<pre>(.*?)</pre>', ' ', html), html_list))
      html_list = list(map(lambda html: re.sub(r'<code>(.*?)</code >', ' ', html), html_list))
      soup_list = list(map(lambda html: BeautifulSoup(html, "html.parser"), html_list))
      text_list = list(map(lambda soup: ''.join(soup.findAll(text=True)), soup_list))
      text_list = list(map(lambda text: re.sub(r'\n', '\n\n', text), text_list))
      return "\n".join(text_list)
    except:
      return markdown_string

  def clio_response_getter(response_object, attribute_name, sub_attribute_name, selector, custom_field):
    if not response_object:
      raise(Exception("The selection you made didn't match anything found in Clio."))
    if custom_field:
      ___attribute_object = list(filter(lambda item: (item.get('field_name') == attribute_name), response_object.get('custom_field_values')))
      if (len(___attribute_object) == 0):
        return '';
      return ___attribute_object[0].get('value')
    elif (selector != ''):
      ___attribute_object = list(filter(lambda item: (item.get('name') == selector), response_object.get(attribute_name)))
      if (len(___attribute_object) == 0):
        return '';
      return ___attribute_object[0].get(sub_attribute_name)
    elif (sub_attribute_name != ''):
      ___attribute_object = response_object.get(attribute_name)
      if (___attribute_object == None):
        return ''
      return ___attribute_object.get(sub_attribute_name)
    else:
      return response_object.get(attribute_name) or ''
---
mandatory: True
code: |
  ___ivn_73 = { "MSHWARI": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Safaricom may keep your data indefinitely and never delete it.", "Other Red Flags": "(1) Safaricom might use your data in ways you don't intend them to do. (2) Safaricom might hand information about you to advertisers for marketing purposes.", "Privacy Friendly Provisions": "Safaricom may use  and analyse your Information to keep you informed generally about new products and services unless you opt out of receiving such marketing messages (you may contact Safaricom at any time to opt out of receiving marketing messages.To update your information go to https:/selfcare.safaricom.co.ke and sign in to my Safaricom self-care to look at your personal information. You can change how we get in touch with you and your account details whenever you like.", "Scandals": " \"Safaricom Hacked\" Source: cnyakundi \"Was Safaricom System Hacked Again Or An Internal Sabotage\"            Source: cnyakundi", "Score": "Social Media posts with \"Mshwari\" were rated as 8.1% Positive, 4.7% Negative and 87% Neutral. (6,118 Tweets)", "App": "MSHWARI" }, "BRANCH": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Branch may keep your data indefinitely and never delete it.", "Other Red Flags": "(1) Branch might sell your data to governments, individuals or companies. (2) Branch might hand information about you to advertisers for marketing purposes.", "Privacy Friendly Provisions": "(1) We do not disclose information about identifiable individuals to other parties, but we may provide them with anonymous aggregate information about our users (for example, we may inform them that 500 men aged under 30 have applied for a loan on any given day).  You can withdraw your consent to our collection, processing or use of this information at any time by logging out and uninstalling the App from your Device.", "Scandals": "\"Digital lending apps are coming under scrutiny in East Africa for predatory practices\" Source: QZ  \"Kenyan Govt. Seeks Regulation Of \uFFFDExploitative\uFFFD Mobile Lenders\" Source: Pymnts", "Score": "Social Media Posts with \"Branch app loans\" were rated as 7% Positive, 2.8% Negative and 90.2% Neutral. (1,568 Tweets)", "App": "BRANCH" }, "TALA": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Tala may share your personal information with any third party ", "Other Red Flags": "(1) Tala may keep your data indefinitely and never delete it. (2) Tala might hand information about you to advertisers for marketing purposes. (3) Tala might use your data in ways you don't intend them to do. (4) Tala shall not be liable for any loss or damage arising from collection, processing and sharing of your personal Information.", "Privacy Friendly Provisions": "You may at any time opt-out from receiving marketing type communications.", "Scandals": "\"Digital lending apps are coming under scrutiny in East Africa for predatory practices\" Source: QZ  \"Kenyan Govt. Seeks Regulation Of \uFFFDExploitative\uFFFD Mobile Lenders\" Source: Pymnts", "Score": "Social Media Posts with \"Tala Loan app\" were rated as 9.2% Positive, 3.2% Negative and 87.6% Neutral. (446 Tweets)", "App": "TALA" }, "OKASH": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Okash will contact your Emergency Contact should you default", "Other Red Flags": "(1) Okash may keep your data indefinitely and never delete it. (2) Okash might hand information about you to advertisers for marketing purposes. (3) might sell your data to governments, individuals or companies.", "Privacy Friendly Provisions": "None  (Major Concern)", "Scandals": "\"Kenyans Decry Breach Of Privacy By Okash, By Randomly Texting Contacts Upon Loan Default\" Source: Kahawa Tungu ", "Score": "Social Media Posts with \"Okash Loans\" were rated as 6% Positive 6% Negative and, 88% Neutral. (757 Tweets)", "App": "OKASH" }, "STAWI": { "Information Trade-Off": "No Privacy Policy Present (Major Concern)", "Main Privacy Threat": "No Privacy Policy Present (Major Concern)", "Other Red Flags": "No Privacy Policy Present", "Privacy Friendly Provisions": "None  (Major Concern)", "Scandals": "\"Stawi loan costly and is part of Huduma Namba scheme, says civil society\" Source: Africog", "Score": "Social Media Posts with \"Stawi Loans\" were rated as 7.4% Positive 4.4% Negative and, 88.1% Neutral. (680 Tweets)", "App": "STAWI" }, "BERRY": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Berry may keep your data indifenitely and never delete it.", "Other Red Flags": "(1) Berry might hand information about you to advertisers for marketing purposes. (2) Berry might use your data in ways you don't intend them to do.", "Privacy Friendly Provisions": "None  (Major Concern)", "Scandals": "None", "Score": "Social Media Posts with \"Berry Loan App\" were rated as 4% Positive 0.2% Negative and , 95% Neutral.", "App": "BERRY" }, "PEZESHA": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Pezesha will continue to retain your Personal information after you delete the App.", "Other Red Flags": "(1) Pezesha might use your data in ways you don't intend them to do. (2) Pezesha might sell your data to governments, individuals or companies. (3) Your data may be shared with any third party. (4) Pezesha might hand information about you to advertisers for marketing purposes.", "Privacy Friendly Provisions": "You may at any time opt-out from receiving marketing type communications.", "Scandals": "None", "Score": "Social Media Posts with \" Pezesha Loan\" were rated as  6.3% Positive,  0.1% negative, and 93% Neutral. (828 Tweets)", "App": "PEZESHA" }, "AFRIKASH": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Afrikash may use your personal information in ways you don;t intend it to. \"You hereby consent to Afrikash verifying the Personal Information and the Relevant Information with the Mobile Money Providers and using of the Personal Information and the Relevant Information to the extent necessary in the opinion of AKL.\"", "Other Red Flags": "(1) Afrikash may keep your data indefinitely and never delete it. (2) Afrikash might hand information about you to advertisers for marketing purposes. (3) Afrikash might sell your data to governments, individuals or companies.", "Privacy Friendly Provisions": "None  (Major Concern)", "Scandals": "None", "Score": "Social Media Posts with \" Afrikash\" were rated as  17.1 % Positive,  0 % negative, and 82.9% Neutral. (2 Tweets)", "App": "AFRIKASH" }, "ZIDISHA": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "", "Other Red Flags": "", "Privacy Friendly Provisions": "Zidisha users have the right to do the following:\n\n1. Withdraw their consent at any time. Users have the right to withdraw consent where they have previously given their consent to the processing of their Personal Data.\n2. Object to processing of their Data. Users have the right to object to the processing of their Data if the processing is carried out on a legal basis other than consent. Further details are provided in the dedicated section below.\n3. Access their Data. Users have the right to learn if Data is being processed by the Owner, obtain disclosure regarding certain aspects of the processing and obtain a copy of the Data undergoing processing.\n4. Verify and seek rectification. Users have the right to verify the accuracy of their Data and ask for it to be updated or corrected.\n5. Restrict the processing of their Data. Users have the right, under certain circumstances, to restrict the processing of their Data. In this case, the Owner will not process their Data for any purpose other than storing it.\n6. Have their Personal Data deleted or otherwise removed. Users have the right, under certain circumstances, to obtain the erasure of their Data from the Owner.\n7. Receive their Data and have it transferred to another controller. Users have the right to receive their Data in a structured, commonly used and machine readable format and, if technically feasible, to have it transmitted to another controller without any hindrance. ", "Scandals": "None", "Score": "Social Media Posts with \" Zidisha Loans\" were rated as  12.1 % Positive,  1.7 % negative, and 86.2% Neutral. (921 Tweets)", "App": "ZIDISHA" }, "SENTI": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Senti might sell your data to governments, individuals or companies", "Other Red Flags": "(1) Senti might hand information about you to advertisers for marketing purposes. (2) Senti may keep your data indifenitely and never delete it. (3) Senti might use your data in ways you don't intend them to do.", "Privacy Friendly Provisions": "None  (Major Concern)", "Scandals": "None", "Score": "Social Media Posts with \" Senti Loan Kenya\" were rated as  18.96 % Positive,  1.3 % negative, and 79.74% Neutral. (5 Tweets)", "App": "SENTI" }, "TIMIZA": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "Barclays may keep your data indefinitely and never delete it.", "Other Red Flags": "Timiza  might hand information about you to advertisers for marketing purposes.", "Privacy Friendly Provisions": "\"We are responsible for ensuring that your personal information is processed lawfully and in a\nreasonable manner that does not infringe your privacy.\nYour personal information will not be disclosed to anyone else without your consent unless the\nBarclays Group is legally required or permitted to disclose it.\"", "Scandals": "None", "Score": "Social Media Posts with \" timiza loan\" were rated as 9% positive, 5% negative, and 86% neutral (1001 Tweets)", "App": "TIMIZA" }, "SHIKA LOAN": { "Information Trade-Off": "Name, Address, Phone number, ID/PP Number, DOB, Email,  Phone type/model, Subscriptions (including third party subscriptions), Billing Statements, Cloud hosting registration details, e-commerce registration and usage, M-PESA Transactions, Call Data Records: Contact List, Call Logs, SMS, Data Sessions, Your Location.", "Main Privacy Threat": "(1) Alternative Circle might hand information about you to advertisers for marketing purposes. (2) Alternative Circle may keep your data indefinitely and never delete it. (3) Alternative Circle might use your data in ways you don't intend them to do.", "Other Red Flags": "Alternative Circle might sell your data to governments, individuals or companies", "Privacy Friendly Provisions": "None  (Major Concern)", "Scandals": "", "Score": "Social Media Posts with \" Shika Loan\" were rated as  7% positive, 5% negative, and 88% neutral (105 Tweets)", "App": "SHIKA LOAN" } }
---
mandatory: True
code: |
---
mandatory: True
code: |
  ___display_mapping = { '___shortcut_72_false': "Guard_Start is false", '___ivn_72': "Guard_Start is true", '___ivn_22': "Search_app", '___attribute_22_74': "Search_app: App", '___attribute_22_75': "Search_app: Information Trade-Off", '___attribute_22_76': "Search_app: Main Privacy Threat", '___attribute_22_77': "Search_app: Other Red Flags", '___attribute_22_78': "Search_app: Privacy Friendly Provisions", '___attribute_22_79': "Search_app: Scandals", '___attribute_22_80': "Search_app: Score", 'Today': "Today", '___ivn_73': "privacy_risks" }
---
initial: True
code: |
	import json


	def ___define_until_idempotent():
		___define_immutable_until_idempotent()
		___define_continuous_until_idempotent()

	def ___define_immutable_until_idempotent():
		original_dict = all_variables()
		___define_immutable()
		if all_variables() != original_dict:
			re_run_logic()
	def ___define_continuous_until_idempotent():
		original_dict = all_variables()
		___define_continuous()
		if all_variables() != original_dict:
			re_run_logic()
	def ___define_immutable():
		vars = all_variables()

		if ((not "___ivn_22" in vars) and ("___table_direct_205397" in vars)): define("___ivn_22", ___ivn_73.get(___table_direct_205397))


		if ((not ("___shortcut_72_false" in vars)) and (("___ivn_72" in vars))):
			define("___shortcut_72_false", ((primitive_value(((augment(___ivn_72) if ("___ivn_72" in vars) else Undefined()).boolean_eq(augment(False)))))))
		if ((not ("___attribute_22_74" in vars)) and (("___ivn_22" in vars))):
			define("___attribute_22_74", ((primitive_value(((augment(___ivn_22) if ("___ivn_22" in vars) else Undefined()).dictionary_access(augment("App")))))))
		if ((not ("___attribute_22_75" in vars)) and (("___ivn_22" in vars))):
			define("___attribute_22_75", ((primitive_value(((augment(___ivn_22) if ("___ivn_22" in vars) else Undefined()).dictionary_access(augment("Information Trade-Off")))))))
		if ((not ("___attribute_22_76" in vars)) and (("___ivn_22" in vars))):
			define("___attribute_22_76", ((primitive_value(((augment(___ivn_22) if ("___ivn_22" in vars) else Undefined()).dictionary_access(augment("Main Privacy Threat")))))))
		if ((not ("___attribute_22_77" in vars)) and (("___ivn_22" in vars))):
			define("___attribute_22_77", ((primitive_value(((augment(___ivn_22) if ("___ivn_22" in vars) else Undefined()).dictionary_access(augment("Other Red Flags")))))))
		if ((not ("___attribute_22_78" in vars)) and (("___ivn_22" in vars))):
			define("___attribute_22_78", ((primitive_value(((augment(___ivn_22) if ("___ivn_22" in vars) else Undefined()).dictionary_access(augment("Privacy Friendly Provisions")))))))
		if ((not ("___attribute_22_79" in vars)) and (("___ivn_22" in vars))):
			define("___attribute_22_79", ((primitive_value(((augment(___ivn_22) if ("___ivn_22" in vars) else Undefined()).dictionary_access(augment("Scandals")))))))
		if ((not ("___attribute_22_80" in vars)) and (("___ivn_22" in vars))):
			define("___attribute_22_80", ((primitive_value(((augment(___ivn_22) if ("___ivn_22" in vars) else Undefined()).dictionary_access(augment("Score")))))))



	def ___define_continuous():
		vars = all_variables()






	def rich_text_variable_dictionary():
		vars = all_variables()
		return {

		}
---
initial: True
code: |
	___define_until_idempotent()
---
initial: True
code: |
	def passive_possible_variables():
		vars = all_variables()
		generated_names = { '___shortcut_72_false': markdown_to_plaintext(___shortcut_72_false) if ("___shortcut_72_false" in vars) else '', '___ivn_72': markdown_to_plaintext(___ivn_72) if ("___ivn_72" in vars) else '', '___ivn_22': markdown_to_plaintext(___ivn_22) if ("___ivn_22" in vars) else '', '___attribute_22_74': markdown_to_plaintext(___attribute_22_74) if ("___attribute_22_74" in vars) else '', '___attribute_22_75': markdown_to_plaintext(___attribute_22_75) if ("___attribute_22_75" in vars) else '', '___attribute_22_76': markdown_to_plaintext(___attribute_22_76) if ("___attribute_22_76" in vars) else '', '___attribute_22_77': markdown_to_plaintext(___attribute_22_77) if ("___attribute_22_77" in vars) else '', '___attribute_22_78': markdown_to_plaintext(___attribute_22_78) if ("___attribute_22_78" in vars) else '', '___attribute_22_79': markdown_to_plaintext(___attribute_22_79) if ("___attribute_22_79" in vars) else '', '___attribute_22_80': markdown_to_plaintext(___attribute_22_80) if ("___attribute_22_80" in vars) else '', 'Today': markdown_to_plaintext(Today) if ("Today" in vars) else '', '___ivn_73': markdown_to_plaintext(___ivn_73) if ("___ivn_73" in vars) else '' }
		user_defined_names = { "Guard_Start is false": generated_names['___shortcut_72_false'], "Guard_Start is true": generated_names['___ivn_72'], "Search_app": generated_names['___ivn_22'], "Search_app: App": generated_names['___attribute_22_74'], "Search_app: Information Trade-Off": generated_names['___attribute_22_75'], "Search_app: Main Privacy Threat": generated_names['___attribute_22_76'], "Search_app: Other Red Flags": generated_names['___attribute_22_77'], "Search_app: Privacy Friendly Provisions": generated_names['___attribute_22_78'], "Search_app: Scandals": generated_names['___attribute_22_79'], "Search_app: Score": generated_names['___attribute_22_80'], "Today": generated_names['Today'], "privacy_risks": generated_names['___ivn_73'] }
		return merge_two_dicts(generated_names, user_defined_names)
---
initial: True
code: |
	import requests, json, time

---
initial: True
code: |
  def ___email_template_function_2160():
    vars = all_variables()
    ___subject = "TEST MODE: Someone isn't bothered with PrivacyGuard"
    ___body = """TEST MODE: This app is in test mode. To remove this message and to send emails to outside recipients, you must activate the app.

	"""
    return DATemplate(subject=___subject, content=___body)
---
initial: True
code: |
  def ___email_template_function_2159():
    vars = all_variables()
    ___subject = "TEST MODE: Someone started PrivacyGuard."
    ___body = """TEST MODE: This app is in test mode. To remove this message and to send emails to outside recipients, you must activate the app.

	"""
    return DATemplate(subject=___subject, content=___body)
---
initial: True
code: |
  def ___send_t_App_Start_email_cfcac1e96398():
    import requests
    attachments = []

    # If an email attachment has an attach-if, it may return an empty string, and we want to exclude those values
    attachments = [attch for attch in attachments if attch]

    permission_response = requests.get(url = 'https://community.lawyer/delivery_permitted', params = { 'id': 510, 'key': 'uW7aNoI8oC0QoltaLa_Uqg', 'desired_deliveries': 1 })
    data = permission_response.json()
    if data['permitted']:
      vars = all_variables()
      send_email(template=___email_template_function_2159(), to="biinsoftware61@gmail.com", sender='"Docassist" <no-reply@send.community.lawyer>', attachments=attachments)
      requests.post(url = 'https://community.lawyer/increment_delivery', params = { 'id': 510, 'key': 'uW7aNoI8oC0QoltaLa_Uqg', 'increment': 1 })
    return ''
---
initial: True
code: |
  def ___email_template_function_2158():
    vars = all_variables()
    ___subject = "TEST MODE: Someone is looking at \"%s " % ((augment(___attribute_22_64) if ("___attribute_22_64" in vars) else empty_string()))
    ___body = """TEST MODE: This app is in test mode. To remove this message and to send emails to outside recipients, you must activate the app.

	"""
    return DATemplate(subject=___subject, content=___body)
---
initial: True
code: |
  def ___send_t_App_Use_email_f6ff631f6d51():
    import requests
    attachments = []

    # If an email attachment has an attach-if, it may return an empty string, and we want to exclude those values
    attachments = [attch for attch in attachments if attch]

    permission_response = requests.get(url = 'https://community.lawyer/delivery_permitted', params = { 'id': 510, 'key': 'uW7aNoI8oC0QoltaLa_Uqg', 'desired_deliveries': 1 })
    data = permission_response.json()
    if data['permitted']:
      vars = all_variables()
      send_email(template=___email_template_function_2158(), to="biinsoftware61@gmail.com", sender='"Docassist" <no-reply@send.community.lawyer>', attachments=attachments)
      requests.post(url = 'https://community.lawyer/increment_delivery', params = { 'id': 510, 'key': 'uW7aNoI8oC0QoltaLa_Uqg', 'increment': 1 })
    return ''
---
mandatory: True
code: |
  import requests
  import json
  define("___authorized", requests.get("https://community.lawyer/docassemble_builder/docassemble_interviews/authorize?id=5122&key=" + str(url_args.get('key'))).json()['authorized'])
---
mandatory: |
  not ___authorized
question: Sorry, you are not authorized to access this page.
subquestion: Try signing into your account or contacting the App author.
---
features:
	debug: True
	inverse navbar: False
	javascript:
		- https://community.lawyer/static/system_d-20.js
	css:
		- https://community.lawyer/static/styles/default-4.css
---
metadata:
	title: |
		LoanGuard
	logo: |
		<img class='app-logo' src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMHdnQVE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--311440e31fade5af68989beee42497d46bfe3a4e/PrivacyGuard-2.png' alt='LoanGuard'/>
	exit url: https://biin.online
---
mandatory: True
code: |
  multi_user = True
---
mandatory: True
code: |
  from docassemble.base.util import device
  ___user_device = device().browser.family
---
mandatory: True
code: |
  if ___user_device == "IE":
    log("This app may not run as expected on Internet Explorer - please consider using a more modern browser, such as those found <a href='http://outdatedbrowser.com/en'>here</a>.", "warning")
---
id: 112313
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="5122">

subquestion: |
	Guard scans local mobile lending apps' privacy policies and warns you of the biggest risks it finds.
field: ___ivn_72

under: |

right: |
	<span class='test-mode-alert'>TEST MODE: This app is in test mode. To remove this message, you must activate the app.</span>

css: |
	<style>
		:root {
			--body-color: #ffffff;
			--navbar-color: #ffffff;
			--text-color: #000000;
			--primary-btn-background-color: #035a6d;
			--primary-btn-background-color-hover: #02313b;
			--primary-btn-text-color: #ffffff;
			--secondary-btn-background-color: #d0021b;
			--secondary-btn-background-color-hover: #9d0214;
			--secondary-btn-text-color: #ffffff;
			--text-link-color: #d0021b;
			--progress-bar-color: #007bff;
			--hide-navbar-background-color: #ffffff;
		}

	</style>
---
id: 104798
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="5122">

subquestion: |
	Pick an app and see how your data is handled.
fields:
	- "<span class=\"producer \" data-variable-name=\"___table_direct_205397\" data-field-id=\"205397\" ></span>": ___table_direct_205397
	  datatype: text
	  input type: dropdown
	  required: true
	  choices: ["AFRIKASH", "BERRY", "BRANCH", "MSHWARI", "OKASH", "PEZESHA", "SENTI", "SHIKA LOAN", "STAWI", "TALA", "TIMIZA", "ZIDISHA"]

under: |
	${ (___send_t_App_Start_email_cfcac1e96398()) }

right: |
	<span class='test-mode-alert'>TEST MODE: This app is in test mode. To remove this message, you must activate the app.</span>

css: |
	<style>
		:root {
			--body-color: #ffffff;
			--navbar-color: #ffffff;
			--text-color: #000000;
			--primary-btn-background-color: #035a6d;
			--primary-btn-background-color-hover: #02313b;
			--primary-btn-text-color: #ffffff;
			--secondary-btn-background-color: #d0021b;
			--secondary-btn-background-color-hover: #9d0214;
			--secondary-btn-text-color: #ffffff;
			--text-link-color: #d0021b;
			--progress-bar-color: #007bff;
			--hide-navbar-background-color: #ffffff;
		}

	</style>
---
id: 104799
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="5122">

subquestion: |
	**${___attribute_22_74 if defined("___attribute_22_74") else empty_string()}**
fields:
	- html: |
			<div style='width:5%'>
				<img src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMDhnQVE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--c3134fb508bd93c590cc7e7d0b791bf7e08d2250/Personal-Info.png' alt='Personal-Info.png' width='100%' />
			</div>

	- html: |
			<span class="producer " data-variable-name="___ivn_52" data-field-id="205401" ><p><strong>Personal Information Trade off</strong></p>

			<p>${___attribute_22_75 if defined("___attribute_22_75") else empty_string()}</p>
			</span>

	- html: |
			<div style='width:5%'>
				<img src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMUFnQVE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--f1a390a9d76526df34b1a50c022c96cb0392e15a/MainThreat.png' alt='MainThreat.png' width='100%' />
			</div>

	- html: |
			<span class="producer " data-variable-name="___ivn_54" data-field-id="205403" ><p><strong>Main Threat</strong></p>

			<p>${___attribute_22_76 if defined("___attribute_22_76") else empty_string()}</p>
			</span>

	- html: |
			<div style='width:5%'>
				<img src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMUVnQVE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--736fc20e06bd3e6465492fc456e32663ca4c9014/Red%20Flags.png' alt='Red Flags.png' width='100%' />
			</div>

	- html: |
			<span class="producer " data-variable-name="___ivn_56" data-field-id="205405" ><p><strong>Other Red Flags</strong></p>

			<p>${___attribute_22_77 if defined("___attribute_22_77") else empty_string()}</p>
			</span>

	- html: |
			<div style='width:7%'>
				<img src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMUlnQVE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--d969f44ed08ef11e2994d9910a9d580ff04f6351/Privacy-Friendly.png' alt='Privacy-Friendly.png' width='100%' />
			</div>

	- html: |
			<span class="producer " data-variable-name="___ivn_58" data-field-id="205407" ><p><strong>Privacy-friendly Provisions</strong></p>

			<p>${___attribute_22_78 if defined("___attribute_22_78") else empty_string()}</p>
			</span>

	- html: |
			<div style='width:5%'>
				<img src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMU1nQVE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--fce26ad6192dd181bab72b411b8ae8173b49ebd7/Scandals.png' alt='Scandals.png' width='100%' />
			</div>

	- html: |
			<span class="producer " data-variable-name="___ivn_60" data-field-id="205409" ><p><strong>Scandals</strong></p>

			<p>${___attribute_22_79 if defined("___attribute_22_79") else empty_string()}</p>
			</span>

	- html: |
			<div style='width:5%'>
				<img src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBMVFnQVE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--0922fc2ba38d166fc5e904ed98ac375a825dbd08/sentiment.png' alt='sentiment.png' width='100%' />
			</div>

	- html: |
			<span class="producer " data-variable-name="___ivn_62" data-field-id="205411" ><p><strong>Social Sentiment</strong></p>

			<p>${___attribute_22_80 if defined("___attribute_22_80") else empty_string()}</p>
			</span>

	- html: |
			<span class="producer " data-variable-name="___ivn_81" data-field-id="217845" ><p><strong>Sentiment comparison table.</strong></p>
			</span>

	- html: |
			<div style='width:100%'>
				<img src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBOUpPQVE9PSIsImV4cCI6bnVsbCwicHVyIjoiYmxvYl9pZCJ9fQ==--4d4fa540aa00991dff751ba1f0733fcb5f7e20c4/Chart%201.PNG' alt='Chart 1.PNG' width='100%' />
			</div>

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><span class="is-final-block" /></div>	${ (___send_t_App_Use_email_f6ff631f6d51()) }

right: |
	<span class='test-mode-alert'>TEST MODE: This app is in test mode. To remove this message, you must activate the app.</span>

css: |
	<style>
		button.btn-primary[type='submit'] {
			display: none;
		}
		:root {
			--body-color: #ffffff;
			--navbar-color: #ffffff;
			--text-color: #000000;
			--primary-btn-background-color: #035a6d;
			--primary-btn-background-color-hover: #02313b;
			--primary-btn-text-color: #ffffff;
			--secondary-btn-background-color: #d0021b;
			--secondary-btn-background-color-hover: #9d0214;
			--secondary-btn-text-color: #ffffff;
			--text-link-color: #d0021b;
			--progress-bar-color: #007bff;
			--hide-navbar-background-color: #ffffff;
		}

	</style>
---
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="true">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="5122">

subquestion: |
	Thank you for using this app. Your session is complete.
---
